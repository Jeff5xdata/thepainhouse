<div class="py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Progress Charts</h1>
            <p class="mt-2 text-gray-600 dark:text-gray-400">Visualize your fitness progress with interactive charts</p>
        </div>

        <!-- Chart Controls -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-6 border border-gray-200 dark:border-gray-700">
            <div class="px-4 py-5 sm:p-6">
                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    <div>
                        <label for="selectedChart" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Chart Type</label>
                        <select wire:model.live="selectedChart" id="selectedChart" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="weight">Weight Progress</option>
                            <option value="body_measurements">Body Measurements</option>
                            <option value="body_fat">Body Fat & Muscle Mass</option>
                            <option value="bmi">BMI Progress</option>
                        </select>
                    </div>

                    <div>
                        <label for="timeRange" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Time Range</label>
                        <select wire:model.live="timeRange" id="timeRange" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                            <option value="7">Last 7 days</option>
                            <option value="30">Last 30 days</option>
                            <option value="90">Last 90 days</option>
                            <option value="180">Last 6 months</option>
                            <option value="365">Last year</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chart Container -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg border border-gray-200 dark:border-gray-700">
            <div class="px-4 py-5 sm:p-6">
                <!-- Debug output -->
                @if(config('app.debug'))
                    <div class="mb-4 p-4 bg-gray-100 dark:bg-gray-700 rounded text-sm">
                        <strong>Debug Info:</strong><br>
                        Chart Data: {{ json_encode($chartData) }}<br>
                        Selected Chart: {{ $selectedChart }}<br>
                        Time Range: {{ $timeRange }}
                    </div>
                @endif
                
                <div class="h-96">
                    <div id="progressChart" wire:ignore></div>
                </div>
            </div>
        </div>

        <!-- Chart Legend -->
        <div class="mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
            <!-- Weight Progress Card -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-700">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <svg class="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                    Weight Progress
                                </dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">
                                    Track your weight changes
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Body Measurements Card -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-700">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <svg class="h-6 w-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                    Body Measurements
                                </dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">
                                    Monitor body composition
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Body Fat Card -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-700">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                    Body Fat & Muscle
                                </dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">
                                    Track body composition
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- BMI Card -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-700">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <svg class="h-6 w-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                    BMI Progress
                                </dt>
                                <dd class="text-lg font-medium text-gray-900 dark:text-gray-100">
                                    Monitor BMI changes
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2">
            <a href="{{ route('weight.tracker') }}" class="group relative bg-white dark:bg-gray-800 p-6 focus-within:ring-2 focus-within:ring-inset focus-within:ring-blue-500 dark:focus-within:ring-blue-400 rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-200">
                <div>
                    <span class="rounded-lg inline-flex p-3 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 ring-4 ring-white dark:ring-gray-800">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                    </span>
                </div>
                <div class="mt-8">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        <span class="absolute inset-0" aria-hidden="true"></span>
                        Weight Tracker
                    </h3>
                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                        Add new weight measurements
                    </p>
                </div>
                <span class="pointer-events-none absolute top-6 right-6 text-gray-300 dark:text-gray-600 group-hover:text-gray-400 dark:group-hover:text-gray-500" aria-hidden="true">
                    <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M20 4h1a1 1 0 00-1-1v1zm-1 12a1 1 0 102 0h-2zM8 3a1 1 0 000 2V3zM3.293 19.293a1 1 0 101.414 1.414l-1.414-1.414zM19 4v12h2V4h-2zm1-1H8v2h12V3zm-.707.293l-16 16 1.414 1.414 16-16-1.414-1.414z"/>
                    </svg>
                </span>
            </a>

            <a href="{{ route('nutrition') }}" class="group relative bg-white dark:bg-gray-800 p-6 focus-within:ring-2 focus-within:ring-inset focus-within:ring-yellow-500 dark:focus-within:ring-yellow-400 rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-200">
                <div>
                    <span class="rounded-lg inline-flex p-3 bg-yellow-50 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-400 ring-4 ring-white dark:ring-gray-800">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
                        </svg>
                    </span>
                </div>
                <div class="mt-8">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        <span class="absolute inset-0" aria-hidden="true"></span>
                        Nutrition
                    </h3>
                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                        Track your nutrition intake
                    </p>
                </div>
                <span class="pointer-events-none absolute top-6 right-6 text-gray-300 dark:text-gray-600 group-hover:text-gray-400 dark:group-hover:text-gray-500" aria-hidden="true">
                    <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M20 4h1a1 1 0 00-1-1v1zm-1 12a1 1 0 102 0h-2zM8 3a1 1 0 000 2V3zM3.293 19.293a1 1 0 101.414 1.414l-1.414-1.414zM19 4v12h2V4h-2zm1-1H8v2h12V3zm-.707.293l-16 16 1.414 1.414 16-16-1.414-1.414z"/>
                    </svg>
                </span>
            </a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.45.0/dist/apexcharts.min.js"></script>
    <script>
        console.log('ApexCharts script loaded!');
        
        let chart = null;
        
        // Function to get chart data from Livewire component
        function getChartDataFromLivewire() {
            // Try to get data from debug info first
            const debugInfo = document.querySelector('.mb-4.p-4.bg-gray-100');
            if (debugInfo) {
                const chartDataText = debugInfo.textContent.match(/Chart Data: (.+)/);
                if (chartDataText) {
                    try {
                        return JSON.parse(chartDataText[1]);
                    } catch (e) {
                        console.error('Error parsing chart data:', e);
                    }
                }
            }
            
            // Fallback: try to get from Livewire component data
            if (window.Livewire) {
                const component = window.Livewire.find(document.querySelector('[wire\\:id]'));
                if (component) {
                    return component.get('chartData');
                }
            }
            
            return null;
        }
        
        // Chart initialization function
        function initializeProgressChart() {
            console.log('Initializing progress chart...');
            
            const chartContainer = document.getElementById('progressChart');
            if (!chartContainer) {
                console.error('Chart container not found');
                return;
            }
            
            // Clear container
            chartContainer.innerHTML = '';
            
            // Get chart data from Livewire
            const chartData = getChartDataFromLivewire();
            
            if (!chartData || !chartData.labels || chartData.labels.length === 0) {
                console.log('No chart data available, showing placeholder');
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">No data available for the selected chart type and time range</div>';
                return;
            }
            
            console.log('Using chart data:', chartData);
            
            // Prepare series for ApexCharts
            const series = chartData.datasets.map(dataset => ({
                name: dataset.label,
                data: dataset.data,
                color: dataset.borderColor
            }));
            
            const isDarkMode = document.documentElement.classList.contains('dark');
            
            const options = {
                chart: {
                    type: 'line',
                    height: 350,
                    toolbar: { show: false },
                    background: 'transparent'
                },
                series: series,
                xaxis: {
                    categories: chartData.labels,
                    labels: {
                        style: {
                            colors: isDarkMode ? '#d1d5db' : '#374151',
                            fontSize: '12px',
                            fontWeight: 500
                        }
                    },
                    axisBorder: {
                        color: isDarkMode ? '#6b7280' : '#d1d5db',
                        width: 2
                    },
                    axisTicks: {
                        color: isDarkMode ? '#6b7280' : '#d1d5db'
                    }
                },
                yaxis: {
                    labels: {
                        style: {
                            colors: isDarkMode ? '#d1d5db' : '#374151',
                            fontSize: '12px',
                            fontWeight: 500
                        }
                    },
                    axisBorder: {
                        color: isDarkMode ? '#6b7280' : '#d1d5db',
                        width: 2
                    }
                },
                grid: {
                    borderColor: isDarkMode ? '#6b7280' : '#d1d5db',
                    strokeDashArray: 4,
                    xaxis: {
                        lines: {
                            show: true,
                            color: isDarkMode ? '#4b5563' : '#e5e7eb'
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true,
                            color: isDarkMode ? '#4b5563' : '#e5e7eb'
                        }
                    }
                },
                stroke: {
                    curve: 'smooth',
                    width: 4,
                    colors: series.map(s => s.color)
                },
                fill: {
                    type: 'gradient',
                    gradient: {
                        shadeIntensity: 1,
                        opacityFrom: 0.8,
                        opacityTo: 0.2,
                        stops: [0, 90, 100]
                    }
                },
                legend: {
                    position: 'top',
                    labels: {
                        colors: isDarkMode ? '#d1d5db' : '#374151',
                        fontSize: '14px',
                        fontWeight: 600
                    }
                },
                tooltip: {
                    theme: isDarkMode ? 'dark' : 'light',
                    style: {
                        fontSize: '14px'
                    }
                },
                markers: {
                    size: 6,
                    strokeWidth: 2,
                    strokeColors: series.map(s => s.color),
                    fillColors: series.map(s => s.color)
                }
            };
            
            try {
                // Destroy existing chart if it exists
                if (chart) {
                    chart.destroy();
                }
                
                console.log('Creating ApexCharts instance...');
                chart = new ApexCharts(chartContainer, options);
                chart.render();
                console.log('Chart rendered successfully!');
            } catch (error) {
                console.error('Error creating chart:', error);
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">Error: ' + error.message + '</div>';
            }
        }
        
        // Initialize when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeProgressChart);
        } else {
            initializeProgressChart();
        }
        
        // Update chart when Livewire updates
        document.addEventListener('livewire:updated', () => {
            console.log('Livewire updated, reinitializing chart...');
            setTimeout(initializeProgressChart, 100);
        });
        
        // Listen for specific updateCharts event
        if (window.Livewire) {
            Livewire.on('updateCharts', () => {
                console.log('updateCharts event received, reinitializing chart...');
                setTimeout(initializeProgressChart, 100);
            });
        }
        
        // Also try after a delay to ensure everything is loaded
        setTimeout(initializeProgressChart, 1000);
    </script>
</div>
